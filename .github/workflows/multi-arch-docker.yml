name: Multi-Architecture Docker Build

on:
  workflow_dispatch:
    inputs:
      tag_suffix:
        description: 'Tag suffix (e.g., "-beta", "-rc1")'
        required: false
        default: ''
        type: string
  push:
    tags:
      - 'v*.*.*'
      - 'multi-arch-*'

env:
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: obsidian-remote

jobs:
  build-matrix:
    name: Build Multi-Architecture Images
    runs-on: self-hosted
    
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        include:
          - arch: amd64
            dockerfile: Dockerfile
            platform: linux/amd64
          - arch: arm64
            dockerfile: Dockerfile.arm64
            platform: linux/arm64
            
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.arch }}${{ github.event.inputs.tag_suffix || '' }}
            type=semver,pattern={{version}}-${{ matrix.arch }}
            type=semver,pattern={{major}}.{{minor}}-${{ matrix.arch }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=Hosted Obsidian instance allowing access via web browser (${{ matrix.arch }})
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image (${{ matrix.arch }})
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.arch }}
          provenance: false
          sbom: false

  create-manifest:
    name: Create Multi-Architecture Manifest
    runs-on: ubuntu-latest
    needs: build-matrix
    
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine tag
        id: tag
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG="${{ github.ref_name }}"
          else
            TAG="multi-arch-$(date +%Y%m%d)"
          fi
          
          SUFFIX="${{ github.event.inputs.tag_suffix || '' }}"
          echo "tag=${TAG}${SUFFIX}" >> $GITHUB_OUTPUT

      - name: Create and push manifest for GitHub Container Registry
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          GHCR_IMAGE="${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}"
          
          docker buildx imagetools create -t "${GHCR_IMAGE}:${TAG}" \
            "${GHCR_IMAGE}:amd64${{ github.event.inputs.tag_suffix || '' }}" \
            "${GHCR_IMAGE}:arm64${{ github.event.inputs.tag_suffix || '' }}"
          
          # Also create latest tag if this is a version tag
          if [[ "${{ github.ref_type }}" == "tag" && "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            docker buildx imagetools create -t "${GHCR_IMAGE}:latest" \
              "${GHCR_IMAGE}:amd64${{ github.event.inputs.tag_suffix || '' }}" \
              "${GHCR_IMAGE}:arm64${{ github.event.inputs.tag_suffix || '' }}"
          fi

      - name: Generate manifest summary
        run: |
          echo "## 🐳 Multi-Architecture Manifest Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Manifest Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ steps.tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Architectures**: amd64, arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ Available Images" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY_GHCR }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
